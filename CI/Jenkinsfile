/*
* MIT License
* 
* Copyright (c) 2019 Beate Ottenw√§lder
* 
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
* 
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
* 
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

def buildConfig 

pipeline { 
    agent { node { label 'sshagent' } } 
    options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10', daysToKeepStr: '30'))
        timeout(time: 2, unit: 'HOURS')
    }
    triggers { cron('H H * * *') }
    stages {      
        stage('Configure Build') {
            steps {
                script {
                    buildConfig = load 'CI/buildConfig.groovy'
                    buildConfig.init()
                    buildConfig.configGit('BettysBot', 'github-bot')

                    echo "Configuration for image ${buildConfig.image()}"
                    echo "Force Build=${buildConfig.forceBuild()}"
                }
            }
        }
        stage('Update Build Config'){
            steps {
                script {                              
                    def configUpdated = buildConfig.updateBaseImages()
                    if (configUpdated) {
                        env.REQUIRE_BUILD = "True"
                    }
                }
            }
        }          
        stage('Build Docker Image'){
            when { 
                environment name: 'REQUIRE_BUILD', value: 'True' 
            }               
            steps {
                sh "docker build --no-cache \
                                 --build-arg BASE_IMAGE_TAG=${buildConfig.baseImageTag()}  \
                                 --label 'version=${buildConfig.version()}' \
                                 --label 'commit=${env.GIT_COMMIT}' \
                                 --label 'base-image=${buildConfig.baseImageTag()}' \
                                 --label 'build-date=${buildConfig.buildDate()}'  \
                                 --label 'maintainer=${buildConfig.maintainer()}' \
                                 -t ${buildConfig.image()}:${buildConfig.imageTag()} ."
            }
        }        
        stage('Test Docker Image') {  
            when { 
                environment name: 'REQUIRE_BUILD', value: 'True' 
            }   
            environment{
                GOSS_FILES_STRATEGY="cp"
                GOSS_SLEEP="10"
            }         
            steps {
                dir ("CI") {
                    sh "dgoss run ${buildConfig.image()}:${buildConfig.imageTag()}"
                }
            }
        } 
        stage('Publish Docker Image') {     
            when { 
                environment name: 'REQUIRE_BUILD', value: 'True' 
                branch "${buildConfig.releaseBranch()}"
            }   
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh "echo ${PASSWORD} | docker login --username ${USERNAME} --password-stdin"
                    sh "docker push ${buildConfig.image()}:${buildConfig.imageTag()}"                
                    sh "docker tag ${buildConfig.image()}:${buildConfig.imageTag()} ${buildConfig.image()}:latest"                
                    sh "docker push ${buildConfig.image()}:latest"                
                }
            }
        }
        stage('Publish Updated Build Config'){
            when { 
                environment name: 'REQUIRE_BUILD', value: 'True' 
                branch "${buildConfig.releaseBranch()}"
            }               
            steps {
                script {                    
                    buildConfig.publishToReleaseBranch()                    
                }
            }
        }  
        stage('Tag Git Repo') {    
            when { 
                environment name: 'REQUIRE_BUILD', value: 'True' 
                branch "${buildConfig.releaseBranch()}"
            }                      
            steps {
                sshagent(credentials: ['github-bot']) {
                    sh "git tag -a ${buildConfig.imageTag()} -m \"Image ${buildConfig.image()}:${buildConfig.imageTag()} \
                                                        \n\n New image released. Get it with: \
                                                        \n 'docker pull ${buildConfig.image()}:${buildConfig.imageTag()}' \
                                                        \n\n Base Image: ${buildConfig.baseImageTag()} \""
                    sh "git push origin ${buildConfig.imageTag()}"
                }
            }
        }    
        stage('Cleanup Docker Image'){
            when { 
                environment name: 'REQUIRE_BUILD', value: 'True' 
            }               
            steps {
                sh "docker rm ${buildConfig.image()}:${buildConfig.imageTag()}"
                sh "docker rm ${buildConfig.image()}:latest"                          
            }
        }                   
    }
    post {
        success {
            script {
                if (env.REQUIRE_BUILD == 'True') {
                    emailext attachLog: true, 
                        recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']],
                        subject: "[Jenkins] Job ${currentBuild.fullProjectName} (${currentBuild.number}): ${currentBuild.result}",
                        body: "New Image was built: \n\n ${buildConfig.image()}:${buildConfig.imageTag()}."                
                }
            }
        }
        unsuccessful {
            emailext attachLog: true, 
                recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']],
                subject: "[Jenkins] Job ${currentBuild.fullProjectName} (${currentBuild.number}): ${currentBuild.result}",
                body: "For Details, see ${currentBuild.absoluteUrl}."
        }
    }
}